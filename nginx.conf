user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Fix Socket.IO/Engine.IO: only send Connection: upgrade when client actually upgrades
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip 壓縮
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/atom+xml image/svg+xml;

    # 上游服務器配置
    upstream nodejs_backend {
        least_conn;
        server app:3000 max_fails=3 fail_timeout=30s;
    }

    # HTTP 服務器 (重定向到 HTTPS)
    server {
        listen 80;
        server_name vps.bltn.cc;

        # Let's Encrypt 驗證
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # 其他請求重定向到 HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS 服務器 (端口 4433)
    server {
        listen 4433 ssl;
        http2 on;
        server_name vps.bltn.cc;

        # SSL 證書配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # 如果使用 Let's Encrypt:
        # ssl_certificate /etc/letsencrypt/live/vps.bltn.cc/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/vps.bltn.cc/privkey.pem;

        # SSL 安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 安全頭
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # 靜態文件
        location /static/ {
            alias /var/www/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Socket.IO WebSocket 支持 (重要!)
        location /socket.io/ {
            proxy_pass http://nodejs_backend;
            
            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 代理頭
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # 超時設置 (WebSocket 長連接)
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # 緩衝設置
            proxy_buffering off;
            proxy_cache off;

            # 可選：處理 CORS 與 OPTIONS（若你的頁面與 API/WS 不同源時）
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
            if ($request_method = OPTIONS) { return 204; }
        }

        # API 和其他請求
        location / {
            proxy_pass http://nodejs_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超時設置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # CORS
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # OPTIONS 請求處理
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # 健康檢查
        location /health {
            proxy_pass http://nodejs_backend;
            access_log off;
        }
    }
}
